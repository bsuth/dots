local awful = require('awful')
local beautiful = require('beautiful')

-- Autofocus another client when the current one is closed
require('awful/autofocus')

-- Order matters here!
require('theme')
local tagState = require('tagState')
local Tagbar = require('tagbar')
local bindings = require('bindings')

-- -----------------------------------------------------------------------------
-- Layouts
-- -----------------------------------------------------------------------------

awful.layout.append_default_layout({
  name = 'layout',
  arrange = p -> {
    if p.workarea.height > p.workarea.width {
      local clientHeight = p.workarea.height / math.max(1, #p.clients)
      for i, client in ipairs(p.clients) {
        p.geometries[client] = {
          x = p.workarea.x,
          y = p.workarea.y + (i - 1) * clientHeight,
          width = p.workarea.width,
          height = clientHeight,
        }
      }
    } elseif #p.clients < 4 {
      awful.layout.suit.spiral.dwindle.arrange(p)
    } else {
      awful.layout.suit.fair.horizontal.arrange(p)
    }
  },
})

-- -----------------------------------------------------------------------------
-- Rules
-- -----------------------------------------------------------------------------

awful.rules.rules = {
  {
    rule = {},
    properties = {
      border_width = beautiful.border_width,
      border_color = beautiful.border_normal,

      keys = bindings.clientkeys,
      buttons = bindings.clientbuttons,

      floating = false,
      maximized = false,

      focus = awful.client.focus.filter,
      screen = awful.screen.preferred,
      placement = awful.placement.no_overlap + awful.placement.no_offscreen,
    },
  },

  {
    rule_any = {
      type = {
        'dialog',
      },
      name = {
        'Event Tester', -- xev
      },
      role = {
        'pop-up', -- Google Chrome's (detached) Developer Tools.
      },
    },
    properties = {
      above = true,
      floating = true,
    },
  },
}

-- -----------------------------------------------------------------------------
-- Misc
-- -----------------------------------------------------------------------------

awful.screen.connect_for_each_screen(s -> {
  s.tagbar = Tagbar(s)
  if !tagState.restoreScreen(s) {
    awful.tag({ '1' }, s, awful.layout.layouts[1])
  }
})

-- Signal function to execute when a new client appears.
client.connect_signal('manage', c -> {
  if awesome.startup {
    -- Prevent clients from being unreachable after screen count changes.
    if !c.size_hints.user_position && !c.size_hints.program_position {
      awful.placement.no_offscreen(c)
    }
  } else {
    -- Set the windows at the slave,
    -- i.e. put it at the end of others instead of setting it as master.
    awful.client.setslave(c)
  }
})

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal('mouse::enter', c -> {
  c:emit_signal('request::activate', 'mouse_enter')
})

-- -----------------------------------------------------------------------------
-- Client Buffer
--
-- A private tag used as a stack for temporarily storing clients
-- -----------------------------------------------------------------------------

awful.clientbuffer = awful.tag.add('_clientbuffer', {
  screen = awful.screen.focused(),
  layout = awful.layout.layouts[1],
})

awesome.connect_signal('startup', () -> {
  for s in screen {
    for _, tag in ipairs(s.tags) {
      for _, c in ipairs(tag:clients()) {
        if c.minimized {
          c:move_to_tag(awful.clientbuffer)
        }
      }
    }
  }
})
