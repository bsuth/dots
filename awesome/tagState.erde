local awful = require('awful')
local gears = require('gears')
local naughty = require('naughty')
local cjson = require('cjson')

local tagState = {}
local TAGSTATE_BACKUP_FILENAME = '/tmp/awesomewm_tag_state_backup'
local tagStateBackup = {}

do {
  local tagStateBackupFile = io.open(TAGSTATE_BACKUP_FILENAME, 'rb')
  if tagStateBackupFile {
    tagStateBackup = cjson.decode(tagStateBackupFile:read('*a'))
    tagStateBackupFile:close()
  }
}

-- -----------------------------------------------------------------------------
-- Restore Tags
-- -----------------------------------------------------------------------------

function tagState.clear() {
  local tagStateBackupFile = io.open(TAGSTATE_BACKUP_FILENAME, 'w')
  if tagStateBackupFile {
    tagStateBackupFile:write('{}')
    tagStateBackupFile:close()
  }
}

function tagState.backup() {
  tagStateBackup = {}

  for s in screen {
    local screenBackup = {}

    for _, tag in ipairs(s.tags) {
      if !tag.name:match('^_') {
        local tagBackup = { name = tag.name, selected = tag.selected }

        for _, c in ipairs(tag:clients()) {
          -- check if PID is actually available
          if type(c.pid) == 'number' {
            table.insert(tagBackup, c.pid)
          }
        }

        table.insert(screenBackup, tagBackup)
      }
    }
    
    tagStateBackup[s.index] = screenBackup
  }

  local tagStateBackupFile = io.open(TAGSTATE_BACKUP_FILENAME, 'w')

  if tagStateBackupFile {
    tagStateBackupFile:write(cjson.encode(tagStateBackup))
    tagStateBackupFile:close()
  }
}

function tagState.restoreScreen(s) {
  local screenBackup = tagStateBackup[s.index]

  if !screenBackup {
    return false
  }

  local clientPidLookup = {}
  for c in awful.client.iterate() {
    -- check if PID is actually available
    if type(c.pid) == 'number' {
      clientPidLookup[c.pid] = c
    }
  }

  local tagNames = {}
  for _, tagBackup in ipairs(screenBackup) {
    table.insert(tagNames, tagBackup.name)
  }

  -- Need to use awful.tag here, since awful.tag.add fails to set the screen's
  -- selected_tag appropriately
  local tags = awful.tag(tagNames, s, awful.layout.layouts[1])

  for i, tagBackup in ipairs(screenBackup) {
    for _, clientPid in ipairs(tagBackup) {
      local c = clientPidLookup[clientPid]
      if c != nil { c:move_to_tag(tags[i]) }
    }
  }

  for i, tagBackup in ipairs(screenBackup) {
    if tagBackup.selected {
      tags[i]:view_only()
    }
  }

  return true
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return tagState
