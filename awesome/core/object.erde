-- -----------------------------------------------------------------------------
-- Object
-- -----------------------------------------------------------------------------

local Object = setmetatable({}, ObjectMT)

function Object:publish(event, ...) {
  local native_handler = self["_on_{event}"]
  local subscriptions = rawget(self, '_subscriptions')

  if type(native_handler) == 'function' {
    native_handler(self, ...)
  }

  if subscriptions[event] {
    for _, subscription in ipairs(subscriptions[event]) {
      subscription(...)
    }
  }
}

function Object:subscribe(event, callback) {
  local subscriptions = rawget(self, '_subscriptions')
  subscriptions[event] ||= {}

  for _, subscription in ipairs(subscriptions[event]) {
    if subscription == callback {
      -- Prevent duplicate subscriptions
      return callback
    }
  }

  table.insert(subscriptions[event], callback)
  return callback
}

function Object:unsubscribe(event, callback) {
  local subscriptions = rawget(self, '_subscriptions')
  if subscriptions[event] {
    for i, subscription in ipairs(subscriptions[event]) {
      if subscription == callback {
        table.remove(subscriptions[event], i)
        break
      }
    }
  }
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return (class, ...) -> {
  local proxy = setmetatable({}, {
    __index = key => {
      if class[key] != nil {
        return class[key]
      } else {
        return Object[key]
      }
    }
  })

  local instanceMT = { __index = proxy, __newindex = proxy }
  local instance = setmetatable({ _proxy = proxy, _subscriptions = {} }, instanceMT)

  if type(class.__init) == 'function' {
    class.__init(instance, ...)
  }

  -- Only start emitting events after initialization
  instanceMT.__newindex = (key, value) => {
    if proxy[key] != value {
      proxy[key] = value
      self:publish("change_{key}", value)
    }
  }

  return instance
}
