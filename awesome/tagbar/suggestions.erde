local awful = require('awful')
local wibox = require('wibox')
local { palette } = require('core.theme')
local Object = require('utils.Object')
local { TAGBAR_HEIGHT, TAGBAR_FONT } = require('tagbar.constants')
local tagbar_history = require('tagbar.history')

local MAX_SUGGESTIONS = 10

local Suggestions = {}

-- -----------------------------------------------------------------------------
-- Private
-- -----------------------------------------------------------------------------

function Suggestions:_init() {
  self._filtered_suggestions = tagbar_history
  self:rawset('selected', 0)

  self._suggestion_widgets = {}
  for i = 1, MAX_SUGGESTIONS {
    table.insert(self._suggestion_widgets, wibox.widget({
      text = '',
      halign = 'center',
      valign = 'center',
      font = TAGBAR_FONT,
      widget = wibox.widget.textbox,
    }))
  }

  self.root_widget = wibox.widget({
    spacing = 16,
    layout  = wibox.layout.fixed.horizontal,
  })

  self._popup = awful.popup({
    widget = {
      {
        self.root_widget,
        widget = wibox.container.place,
      },
      left = 16,
      right = 16,
      widget = wibox.container.margin,
    },
    screen = awful.screen.focused(),
    visible = false,
    ontop = true,
    minimum_height = TAGBAR_HEIGHT,
    fg = palette.white,
    bg = palette.dark_gray,
  })
}

function Suggestions:_on_change_screen() {
  self._popup.screen = self.screen
  self._popup.x = self.screen.geometry.x
  self._popup.y = self.screen.geometry.y + TAGBAR_HEIGHT
  self._popup.minimum_width = self.screen.geometry.width
}

function Suggestions:_on_change_filter() {
  local trimmed_filter = self.filter:trim()
  local suggestions = table.collect(ipairs(tagbar_history))

  self._filtered_suggestions = table.slice(
    table.filter(suggestions, suggestion -> suggestion:match(trimmed_filter)),
    1,
    MAX_SUGGESTIONS,
  )

  self.root_widget.children = table.map(self._filtered_suggestions, (suggestion, i) -> {
    local widget = self._suggestion_widgets[i]
    widget.text = suggestion
    return widget
  })

  self:rawset('selected', 0)
}

function Suggestions:_on_change_selected() {
  for i = 1, #self.root_widget.children {
    local widget = self.root_widget.children[i]
    local suggestion = self._filtered_suggestions[i]

    if i == self.selected {
      widget.markup = [[<span foreground="{palette.blue}">{suggestion}</span>]]
    } else {
      widget.text = suggestion
    }
  }
}

function Suggestions:_on_change_active() {
  if self.active {
    self.filter = ''
    self.selected = 0
    self._popup.visible = true
  } else {
    self._popup.visible = false
  }
}

-- -----------------------------------------------------------------------------
-- Public
-- -----------------------------------------------------------------------------

function Suggestions:current() {
  if self.selected == 0 {
    return self.default_suggestion
  } else {
    return self._filtered_suggestions[self.selected]
  }
}

function Suggestions:prev() {
  if self.selected == 0 {
    self.selected = #self._filtered_suggestions
  } else {
    self.selected -= 1
  }
  return self:current()
}

function Suggestions:next() {
  if self.selected == #self._filtered_suggestions {
    self.selected = 0
  } else {
    self.selected += 1
  }
  return self:current()
}

function Suggestions:delete() {
  local current_suggestion = self:current()

  local num_filtered_suggestions = #self._filtered_suggestions
  local new_selected = self.selected < num_filtered_suggestions
    && self.selected || num_filtered_suggestions - 1

  tagbar_history:clear(current_suggestion)
  self:_on_change_filter()
  self.selected = new_selected

  return self:current()
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Object(Suggestions)
