local naughty = require('naughty')
local Object = require('utils.Object')

local NOTIFICATIONS_HISTORY_SIZE = 5

-- -----------------------------------------------------------------------------
-- Notifications
-- -----------------------------------------------------------------------------

local notifications = Object({
  _init = () => {
    self:rawset('history', {})

    -- DO NOT USE `naughty.is_suspended()`. We use a custom `active` property instead,
    -- since `naughty.suspend()` will ***save and queue*** notifications.
    self:rawset('active', false)
  },
  toggle = () => {
    self.active = !self.active
  },
  clear = () => {
    self.history = {}
  },
})

-- -----------------------------------------------------------------------------
-- Notify
-- -----------------------------------------------------------------------------

local function update_notification_history(notification) {
  -- Some notifications use `text` (awesomewm) and some use `message` (notify-send)
  local notification_text = notification.text || notification.message

  if notification_text {
    local new_history = {}

    table.insert(new_history, {
      text = notification_text,
      timestamp = os.time(os.date("!*t")),
    })

    table.merge(new_history, table.slice(
      notifications.history,
      1,
      math.min(#notifications.history, NOTIFICATIONS_HISTORY_SIZE - 1),
    ))

    notifications.history = new_history
  }
}

naughty.config.notify_callback = notification -> {
  update_notification_history(notification)

  if !notifications.active && !notification.force {
    notification.ignore = true
  }

  notifications:publish('notify', notification)
  return notification
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return notifications
