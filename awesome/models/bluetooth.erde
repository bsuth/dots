local naughty = require('naughty')
local lgi = require('lgi')
local GLib = lgi.require('GLib')
local Gio = lgi.require('Gio')
local Class = require('utils.Class')
local Object = require('utils.Object')
local { system_bus, decode_dbus_value, lgi_extract_dbus_value, dbus_call_async } = require('utils.dbus')

-- -----------------------------------------------------------------------------
-- Bluetooth Adapter
-- -----------------------------------------------------------------------------

local bluetooth_adapter = {}

function bluetooth_adapter:_init() {
  self.powered = false
  self.discovering = false
}

function bluetooth_adapter:_on_change_object_path() {
  if self._properties_changed_subscription {
    system_bus:signal_unsubscribe(self._properties_changed_subscription)
  }

  if self.object_path == nil {
    self.powered = false
    self.discovering = false
  } else {
    dbus_call_async(system_bus, {
      bus_name = 'org.bluez',
      object_path = self.object_path,
      interface_name = 'org.freedesktop.DBus.Properties',
      method_name = 'GetAll',
      parameters = GLib.Variant('(s)', { 'org.bluez.Adapter1' }),
      on_finish = all_properties -> self:_update_properties(decode_dbus_value(all_properties)),
    })

    self._properties_changed_subscription = system_bus:signal_subscribe(
      nil,
      'org.freedesktop.DBus.Properties',
      'PropertiesChanged',
      self.object_path,
      nil,
      Gio.DBusSignalFlags.NONE,
      (_, _, _, _, _, parameters) -> {
        local [ _, properties ] = lgi_extract_dbus_value(parameters)
        self:_update_properties(decode_dbus_value(properties))
      },
    )
  }
}

function bluetooth_adapter:_update_properties(properties) {
  if properties.Powered != nil {
    self.powered = properties.Powered
  }

  if properties.Discovering != nil {
    self.discovering = properties.Discovering
  }
}

function bluetooth_adapter:sanity_check() {
  if !self.object_path {
    naughty.notify({ force = true, text = 'No bluetooth adapter found' })
  }

  return self.object_path
}

function bluetooth_adapter:power_on() {
  if !self:sanity_check() {
    return
  }

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.freedesktop.DBus.Properties',
    method_name = 'Set',
    parameters = GLib.Variant('(ssv)', { 'org.bluez.Adapter1', 'Powered', GLib.Variant('b', true) }),
  })
}

function bluetooth_adapter:power_off() {
  if !self:sanity_check() {
    return
  }

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.freedesktop.DBus.Properties',
    method_name = 'Set',
    parameters = GLib.Variant('(ssv)', { 'org.bluez.Adapter1', 'Powered', GLib.Variant('b', false) }),
  })
}

function bluetooth_adapter:scan_on() {
  if !self:sanity_check() {
    return
  }

  if !self.discovering {
    dbus_call_async(system_bus, {
      bus_name = 'org.bluez',
      object_path = self.object_path,
      interface_name = 'org.bluez.Adapter1',
      method_name = 'StartDiscovery',
    })
  }
}

function bluetooth_adapter:scan_off() {
  if !self:sanity_check() {
    return
  }

  if self.discovering {
    dbus_call_async(system_bus, {
      bus_name = 'org.bluez',
      object_path = self.object_path,
      interface_name = 'org.bluez.Adapter1',
      method_name = 'StopDiscovery',
    })
  }
}

-- -----------------------------------------------------------------------------
-- Bluetooth Device
-- -----------------------------------------------------------------------------

local BluetoothDevice = Class()

function BluetoothDevice:_init(props = {}) {
  self.object_path = props.object_path
  self.adapter_object_path = props.adapter_object_path
  self.name = props.name
  self.address = props.address
  self.connected_state = props.connected && 'connected' || 'disconnected'
  self.paired_state = props.paired && 'paired' || 'unpaired'

  self._properties_changed_subscription = system_bus:signal_subscribe(
    nil,
    'org.freedesktop.DBus.Properties',
    'PropertiesChanged',
    self.object_path,
    nil,
    Gio.DBusSignalFlags.NONE,
    (_, _, _, _, _, parameters) -> {
      local [ _, properties ] = lgi_extract_dbus_value(parameters)
      self:_update_properties(decode_dbus_value(properties))
    },
  )
}

function BluetoothDevice:_update_properties(properties) {
  if properties.Connected != nil {
    self.connected_state = properties.Connected && 'connected' || 'disconnected'
  }

  if properties.Paired != nil {
    self.paired_state = properties.Paired && 'paired' || 'unpaired'
  }
}

function BluetoothDevice:cleanup() {
  system_bus:signal_unsubscribe(self._properties_changed_subscription)
}

function BluetoothDevice:connect() {
  self.connected_state = 'connecting'

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.bluez.Device1',
    method_name = 'Connect',
    on_error = () -> { self.connected_state = 'disconnected' },
  })
}

function BluetoothDevice:disconnect() {
  self.connected_state = 'disconnecting'

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.bluez.Device1',
    method_name = 'Disconnect',
    on_error = () -> { self.connected_state = 'connected' },
  })
}

function BluetoothDevice:pair() {
  self.paired_state = 'pairing'

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.bluez.Device1',
    method_name = 'Pair',
    on_error = () -> { self.paired_state = 'unpaired' },
  } )
}

function BluetoothDevice:trust() {
  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.object_path,
    interface_name = 'org.freedesktop.DBus.Properties',
    method_name = 'Set',
    parameters = GLib.Variant('(ssv)', { 'org.bluez.Device1', 'Trusted', GLib.Variant('b', true) }),
  })
}

function BluetoothDevice:remove() {
  self.paired_state = 'unpairing'

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = self.adapter_object_path,
    interface_name = 'org.bluez.Adapter1',
    method_name = 'RemoveDevice',
    parameters = GLib.Variant('(o)', { self.object_path }),
    on_error = () -> { self.paired_state = 'paired' },
  })
}

-- -----------------------------------------------------------------------------
-- Bluetooth
-- -----------------------------------------------------------------------------

local bluetooth = {}

function bluetooth:_init() {
  self.adapter = Object(bluetooth_adapter)
  self.devices = {}

  dbus_call_async(system_bus, {
    bus_name = 'org.bluez',
    object_path = '/',
    interface_name = 'org.freedesktop.DBus.ObjectManager',
    method_name = 'GetManagedObjects',
    on_finish = managed_objects -> {
      for object_path, managed_object in pairs(decode_dbus_value(managed_objects)) {
        self:_add_managed_object(object_path, managed_object)
      }
    }
  })

  system_bus:signal_subscribe(
    'org.bluez',
    'org.freedesktop.DBus.ObjectManager',
    'InterfacesAdded',
    '/',
    nil,
    Gio.DBusSignalFlags.NONE,
    (_, _, _, _, _, parameters) -> {
      local [ object_path, managed_object ] = lgi_extract_dbus_value(parameters)
      self:_add_managed_object(object_path, decode_dbus_value(managed_object))
    },
  )

  system_bus:signal_subscribe(
    'org.bluez',
    'org.freedesktop.DBus.ObjectManager',
    'InterfacesRemoved',
    '/',
    nil,
    Gio.DBusSignalFlags.NONE,
    (_, _, _, _, _, parameters) -> {
      local [ object_path, removed_interfaces ] = lgi_extract_dbus_value(parameters)
      self:_remove_managed_object(object_path, removed_interfaces)
    },
  )
}

function bluetooth:_add_managed_object(object_path, managed_object) {
  if managed_object['org.bluez.Adapter1'] {
    self.adapter.object_path = object_path
    return
  }

  local is_new_bluetooth_device = (
    managed_object['org.bluez.Device1'] &&
    managed_object['org.bluez.Device1'].Name &&
    managed_object['org.bluez.Device1'].Class &&
    !self.devices[object_path]
  )

  if !is_new_bluetooth_device {
    return
  }

  local device = BluetoothDevice({
    object_path = object_path,
    adapter_object_path = managed_object['org.bluez.Device1'].Adapter,
    name = managed_object['org.bluez.Device1'].Name,
    address = managed_object['org.bluez.Device1'].Address,
    connected = managed_object['org.bluez.Device1'].Connected,
    paired = managed_object['org.bluez.Device1'].Paired,
  })

  self.devices[object_path] = device
  self:publish('device_added', device)
}

function bluetooth:_remove_managed_object(object_path, removed_interfaces) {
  for _, removed_interface in ipairs(removed_interfaces) {
    if removed_interface == 'org.bluez.Adapter1' {
      self.adapter.object_path = nil
    } elseif removed_interface == 'org.bluez.Device1' && self.devices[object_path] {
      local device = self.devices[object_path]
      device:cleanup()
      self.devices[object_path] = nil
      self:publish('device_removed', device)
    }
  }
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Object(bluetooth)
