local unpack = unpack || table.unpack

-- -----------------------------------------------------------------------------
-- Object
-- -----------------------------------------------------------------------------

local ObjectMT = {}
local Object = setmetatable({}, ObjectMT)

-- -----------------------------------------------------------------------------
-- Getters / Setters
-- -----------------------------------------------------------------------------

function Object:rawget(key) {
  local proxy_value = self._proxy[key]
  if proxy_value != nil {
    return proxy_value
  }

  local class_value = self._class[key]
  if class_value != nil {
    return class_value
  }

  return Object[key]
}

function Object:get(key) {
  local getter = self._class["_get_{key}"]
  if type(getter) == 'function' {
    return getter(self)
  } else {
    return Object.rawget(self, key)
  }
}

function Object:rawset(key, value, publish) {
  local old_value = Object.rawget(self, key)
  self._proxy[key] = value
  if publish && old_value != value {
    Object.publish(self, "change_{key}", value, old_value)
  }
}

function Object:set(key, value) {
  local setter = self._class["_set_{key}"]
  if type(setter) == 'function' {
    setter(self, value)
  } else {
    Object.rawset(self, key, value, true)
  }
}

-- -----------------------------------------------------------------------------
-- Pubsub
-- -----------------------------------------------------------------------------

function Object:publish(event, ...) {
  local native_handler = self._class["_on_{event}"]
  if type(native_handler) == 'function' {
    native_handler(self, ...)
  }

  if self._subscriptions[event] {
    -- Make a shallow copy of `self._subscriptions[event]`, otherwise not every
    -- subscription will be called if one of them mutates `self._subscriptions[event]`.
    for _, subscription in ipairs({ unpack(self._subscriptions[event]) }) {
      subscription(...)
    }
  }
}

function Object:subscribe(event, callback) {
  self._subscriptions[event] ||= {}

  for _, subscription in ipairs(self._subscriptions[event]) {
    if subscription == callback {
      -- Prevent duplicate subscriptions
      return callback
    }
  }

  table.insert(self._subscriptions[event], callback)
  return callback
}

function Object:unsubscribe(event, callback) {
  if self._subscriptions[event] {
    for i, subscription in ipairs(self._subscriptions[event]) {
      if subscription == callback {
        table.remove(self._subscriptions[event], i)
        break
      }
    }
  }
}

function Object:once(event, callback) {
  function callback_wrapper(...) { -- needs to be a function for self-reference
    callback(...)
    self:unsubscribe(event, callback_wrapper)
  }
  self:subscribe(event, callback_wrapper)
}

-- -----------------------------------------------------------------------------
-- Constructor
-- -----------------------------------------------------------------------------

local InstanceMT = { __index = Object.get, __newindex = Object.set }

function ObjectMT:__call(class = {}, ...) {
  local instance = setmetatable({
    _class = class,
    _proxy = {},
    _subscriptions = {},
  }, InstanceMT)

  if type(class._init) == 'function' {
    class._init(instance, ...)
  }

  return instance
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Object
