local naughty = require('naughty')
local lgi = require('lgi')
local Gio = lgi.require('Gio')

module system_bus = Gio.bus_get_sync(Gio.BusType.SYSTEM)
module session_bus = Gio.bus_get_sync(Gio.BusType.SESSION)

-- DBus will return maps as arrays of 2-tuples, where the first entry is the
-- key and the second entry is the value. This function decodes these into
-- normal Lua tables.
--
-- NOTE: That there is no way to distinguish a real 2-tuple
-- from a map value without knowing the type beforehand, so this may
-- incorrectly decode values. If the return value contains arrays of strings,
-- this function should not be used.
module function decode_dbus_value(value) {
  if type(value) != 'table' {
    return value
  }

  -- DBus will collapse maps that only have one property into a 2-tuple (for
  -- god knows whatever reason) so we assume that any 2-tuple where the first
  -- entry is a string is a collapsed map.
  if #value == 2 && type(value[1]) == 'string' {
    return { [value[1]] = decode_dbus_value(value[2]) }
  }

  return table.has(value, subvalue -> (type(subvalue) != 'table' || #subvalue != 2 || type(subvalue[1]) != 'string'))
    && table.map(value, decode_dbus_value)
    || table.map(value, [ subkey, subvalue ] -> (decode_dbus_value(subvalue), subkey))
}

module function lgi_extract_dbus_value(value) {
  local value_type = type(value)

  if value_type != 'table' && value_type != 'userdata' {
    return value
  }

  local value_len = #value

  if value_type == 'userdata' && value_len == 0 {
    if value == value.value {
      return value -- object or infinite loop, cannot destruct
    } else {
      return lgi_extract_dbus_value(value.value)
    }
  }

  local t = {}

  if value_type == 'table' {
    for i = 1, value_len {
      table.insert(t, lgi_extract_dbus_value(value[i]))
    }
  } else {
    for i = 1, value_len {
      table.insert(t, lgi_extract_dbus_value(value:get_child_value(i - 1)))
    }
  }

  if value_len == 1 {
    return t[1]
  } else {
    return t
  }
}

module function dbus_call_async(bus, args) {
  bus:call(
    args.bus_name,
    args.object_path,
    args.interface_name,
    args.method_name,
    args.parameters,
    args.reply_type,
    args.flags || Gio.DBusCallFlags.NONE,
    args.timeout_msec || -1,
    args.cancellable,
    (_, result) -> {
      local variant, err = bus:call_finish(result)

      if err && args.on_error {
        args.on_error(table.concat({
          "DBus Error: { err }",
          "bus_name: { args.bus_name }",
          "object_path: { args.object_path }",
          "interface_name: { args.interface_name }",
          "method_name: { args.method_name }",
          "parameters: { args.parameters }",
        }, '\n'))
      }

      if !err && args.on_finish {
        args.on_finish(lgi_extract_dbus_value(variant))
      }
    }
  )
}
