local awful = require('awful')
local gears = require('gears')
local models = require('core.models')
local wibox = require('wibox')
local { global_keys } = require('core.bindings')
local { palette } = require('core.theme')
local { get_full_asset_path, hex2rgb } = require('core.utils')
local veil = require('veil')

-- -----------------------------------------------------------------------------
-- State / Config
-- -----------------------------------------------------------------------------

local STATUS_ITEM_SIZE = 36
local DIAL_BORDER_WIDTH = 6

local selected_item_index = 1

-- -----------------------------------------------------------------------------
-- StatusItemWidget
-- -----------------------------------------------------------------------------

function StatusItemWidget(opts) {
  local text_widget = wibox.widget({
    text = tostring(opts.model.percent) .. '%',
    align = 'center',
    valign = 'center',
    widget = wibox.widget.textbox,
  })

  local status_item_widget = wibox.widget({
    {
      {
        {
          opts.widget,
          widget = wibox.container.place,
        },
        text_widget,
        spacing = 16,
        layout = wibox.layout.fixed.vertical,
      },
      margins = 16,
      widget = wibox.container.margin,
    },
    fg = opts.color,
    bg = palette.dark_gray,
    widget = wibox.container.background,
  })

  opts.model:connect_signal('update', () -> {
    text_widget.text = tostring(opts.model.percent) .. '%'
  })

  status_item_widget:connect_signal('request::select', () -> {
    status_item_widget.bg = palette.light_gray
  })

  status_item_widget:connect_signal('request::unselect', () -> {
    status_item_widget.bg = palette.dark_gray
  })

  status_item_widget.keypressed_callback = opts.keypressed_callback
  return status_item_widget
}

-- -----------------------------------------------------------------------------
-- BATTERY_WIDGET
-- -----------------------------------------------------------------------------

function get_battery_icon() {
  return models.battery.discharging
    && get_full_asset_path('battery-discharging.svg')
    || get_full_asset_path('battery-charging.svg')
}

local BATTERY_ICON_WIDGET = wibox.widget({
  image = get_battery_icon(),
  forced_width = STATUS_ITEM_SIZE,
  forced_height = STATUS_ITEM_SIZE,
  widget = wibox.widget.imagebox,
})

models.battery:connect_signal('update', () -> {
  BATTERY_ICON_WIDGET.image = get_battery_icon()
})

local BATTERY_WIDGET = StatusItemWidget({
  model = models.battery,
  color = palette.red,
  widget = BATTERY_ICON_WIDGET,
})

-- -----------------------------------------------------------------------------
-- VOLUME_WIDGET
-- -----------------------------------------------------------------------------

function get_volume_icon() {
  return models.volume.active
    && get_full_asset_path('volume.svg')
    || get_full_asset_path('volume-muted.svg')
}

local VOLUME_ICON_WIDGET = wibox.widget({
  image = get_volume_icon(),
  forced_width = STATUS_ITEM_SIZE,
  forced_height = STATUS_ITEM_SIZE,
  widget = wibox.widget.imagebox,
})

models.volume:connect_signal('update', () -> {
  VOLUME_ICON_WIDGET.image = get_volume_icon()
})

local VOLUME_WIDGET = StatusItemWidget({
  model = models.volume,
  color = palette.green,
  widget = VOLUME_ICON_WIDGET,
  keypressed_callback = (mod, key) -> {
    if #mod == 0 {
      if key == 'j' {
        models.volume:set(models.volume.percent - 5)
      } elseif key == 'k' {
        models.volume:set(models.volume.percent + 5)
      } elseif key == 'd' {
        models.volume:set(models.volume.percent - 15)
      } elseif key == 'u' {
        models.volume:set(models.volume.percent + 15)
      } elseif key == ' ' {
        models.volume:toggle()
      }
    }
  },
})

-- -----------------------------------------------------------------------------
-- BRIGHTNESS_WIDGET
-- -----------------------------------------------------------------------------

local BRIGHTNESS_WIDGET = StatusItemWidget({
  model = models.brightness,
  color = palette.yellow,
  widget = {
    image = get_full_asset_path('brightness.svg'),
    forced_width = STATUS_ITEM_SIZE,
    forced_height = STATUS_ITEM_SIZE,
    widget = wibox.widget.imagebox,
  },
  keypressed_callback = (mod, key) -> {
    if #mod == 0 {
      if key == 'j' {
        models.brightness:set(models.brightness.percent - 5)
      } elseif key == 'k' {
        models.brightness:set(models.brightness.percent + 5)
      } elseif key == 'd' {
        models.brightness:set(models.brightness.percent - 15)
      } elseif key == 'u' {
        models.brightness:set(models.brightness.percent + 15)
      }
    }
  },
})

-- -----------------------------------------------------------------------------
-- NOTIFICATION_WIDGET
-- -----------------------------------------------------------------------------

function get_notification_icon() {
  if models.notifications.active {
    return get_full_asset_path('notifications-active.svg')
  } else {
    return get_full_asset_path('notifications-inactive.svg')
  }
}

local NOTIFICATION_WIDGET = wibox.widget({
  image = get_notification_icon(),
  forced_width = 64,
  forced_height = 64,
  widget = wibox.widget.imagebox,
})

models.notifications:connect_signal('update', () -> {
  NOTIFICATION_WIDGET.image = get_notification_icon()
})

-- -----------------------------------------------------------------------------
-- STATUS_MENU_WIDGET
-- -----------------------------------------------------------------------------

local STATUS_ROW_WIDGET = wibox.widget({
  BRIGHTNESS_WIDGET,
  VOLUME_WIDGET,
  BATTERY_WIDGET,
  spacing = 16,
  layout = wibox.layout.flex.horizontal,
})

local STATUS_MENU_WIDGET = wibox.widget({
  {
    {
      {
        {
          {
            {
              format = ('<span color="%s">%s</span>'):format(
                palette.magenta,
                '%H:%M'
              ),
              font = 'Quicksand Regular 50',
              forced_height = 50, -- match line height to font size
              widget = wibox.widget.textclock,
            },
            {
              format = ('<span color="%s">%s</span>'):format(
                palette.blue,
                '%a %b %d'
              ),
              font = 'Quicksand Regular 20',
              forced_height = 20, -- match line height to font size
              widget = wibox.widget.textclock,
            },
            spacing = 16,
            -- Force width to prevent resizing on time change
            forced_width = 200,
            layout = wibox.layout.fixed.vertical,
          },
          {
            NOTIFICATION_WIDGET,
            widget = wibox.container.place,
          },
          spacing = 32,
          layout = wibox.layout.fixed.horizontal,
        },
        STATUS_ROW_WIDGET,
        spacing = 32,
        layout = wibox.layout.fixed.vertical,
      },
      margins = 32,
      widget = wibox.container.margin,
    },
    shape_border_width = 1,
    shape_border_color = palette.cyan,
    bg = palette.dark_gray,
    widget = wibox.container.background,
  },
  margins = 16,
  widget = wibox.container.margin,
})

-- -----------------------------------------------------------------------------
-- Keygrabber
-- -----------------------------------------------------------------------------

function focus_status(dir) {
  local new_selected_item_index = math.min(
    #STATUS_ROW_WIDGET.children,
    math.max(1, selected_item_index + dir)
  )

  STATUS_ROW_WIDGET.children[selected_item_index]:emit_signal('request::unselect')
  STATUS_ROW_WIDGET.children[new_selected_item_index]:emit_signal('request::select')
  selected_item_index = new_selected_item_index
}

local keygrabber = awful.keygrabber({
  stop_callback = veil.hide,
  keypressed_callback = (mod, key) => {
    local selected_widget = STATUS_ROW_WIDGET.children[selected_item_index]
    if type(selected_widget.keypressed_callback) == 'function' {
      selected_widget.keypressed_callback(mod, key)
    }
  },
  keybindings = {
    { {}, 'h', () -> focus_status(-1) },
    { {}, 'l', () -> focus_status(1) },
    { {}, 'm', () -> models.notifications:toggle() },
    { {}, 'XF86AudioLowerVolume', () -> models.volume:set(models.volume.percent - 5) },
    { {}, 'XF86AudioRaiseVolume', () -> models.volume:set(models.volume.percent + 5) },
    { {}, 'XF86AudioMute', () -> models.volume:toggle() },
    { {}, 'XF86MonBrightnessDown', () -> models.brightness:set(models.brightness.percent - 8) },
    { {}, 'XF86MonBrightnessUp', () -> models.brightness:set(models.brightness.percent + 8) },
    { { 'Mod4' }, ';', () => self:stop() },
  },
})

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

table.insert(global_keys, awful.key({ 'Mod4' }, ';', () -> {
  focus_status(0)
  keygrabber:start()
  veil.show(STATUS_MENU_WIDGET)
}))
