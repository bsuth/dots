local awful = require('awful')
local gears = require('gears')
local wibox = require('wibox')
local { globalKeys } = require('core.bindings')
local Object = require('core.Object')
local { palette } = require('core.theme')
local Menu = require('components.Menu')
local veil = require('veil')

local TAGBAR_HEIGHT = 48
local TAGBAR_FONT = 'Quicksand Regular 14'

-- -----------------------------------------------------------------------------
-- TabRename
-- -----------------------------------------------------------------------------

local TAGBAR_NAME_HISTORY_FILENAME = "{os.getenv('HOME')}/.tagbar_name_history"
local TAGBAR_NAME_HISTORY_SIZE = 20
local recentlyUsedTabNames = {}

do {
  local tagbarNameHistoryFile = io.open(TAGBAR_NAME_HISTORY_FILENAME, 'r+')
  if tagbarNameHistoryFile {
    for recentlyUsedTabName in tagbarNameHistoryFile:lines() {
      table.insert(recentlyUsedTabNames, recentlyUsedTabName)
    }
    tagbarNameHistoryFile:close()
  }
}

function saveRecentlyUsedTabName(tabName) {
  for i, recentlyUsedTabName in ipairs(recentlyUsedTabNames) {
    if recentlyUsedTabName == tabName {
      table.remove(recentlyUsedTabNames, i)
      break
    }
  }

  table.insert(recentlyUsedTabNames, 1, tabName)
  for i = #recentlyUsedTabNames, TAGBAR_NAME_HISTORY_SIZE, -1 {
    -- Constrain number of saved recently used tab names
    table.remove(recentlyUsedTabNames, i)
  }

  local tagbarNameHistoryFile = io.open(TAGBAR_NAME_HISTORY_FILENAME, 'w')
  tagbarNameHistoryFile:write(table.concat(recentlyUsedTabNames, '\n'))
  tagbarNameHistoryFile:close()
}

local tabRenameMenuProps = {
  options = recentlyUsedTabNames,
  onClose = veil.hide,
  allowArbitraryInput = true,
}

local tabRenameMenu = Object(Menu, tabRenameMenuProps)

-- -----------------------------------------------------------------------------
-- Tab
-- -----------------------------------------------------------------------------

local Tab = {}

function Tab:_init(tag) {
  self.tag = tag

  self.nameWidget = wibox.widget({
    text = tag.name,
    halign = 'center',
    valign = 'center',
    font = TAGBAR_FONT,
    widget = wibox.widget.textbox,
  })

  self.contentWidget = wibox.widget({
    self.nameWidget,
    widget = wibox.container.place,
  })

  self.rootWidget = wibox.widget({
    self.contentWidget,
    fg = palette.white,
    bg = tag.selected && palette.lightGray || palette.darkGray,
    widget = wibox.container.background,
  })

  tag:connect_signal('property::name', () -> {
    self.nameWidget.text = tag.name
  })

  tag:connect_signal('property::selected', () -> {
    self.rootWidget.bg = tag.selected && palette.lightGray || palette.darkGray
  })
}

function Tab:_on_change_disabled() {
  self.rootWidget.fg = self.disabled && '#888888' || palette.white
}

function Tab:toggle() {
  self.disabled = !self.disabled
}

function Tab:rename() {
  -- TODO: default prompt to value to current tag name. not yet supported in
  -- latest stable (awful.widget.prompt.text)

  tabRenameMenuProps.onSubmit = newTagName -> {
    if #newTagName > 0 {
      self.tag.name = newTagName
      saveRecentlyUsedTabName(newTagName)
      tabRenameMenu:refresh()
    }
  }

  tabRenameMenu:run()
  veil.show(tabRenameMenu.rootWidget)
}

-- -----------------------------------------------------------------------------
-- Tagbar
-- -----------------------------------------------------------------------------

local Tagbar = {}

function Tagbar:_init(s) {
  self.screen = s
  self.tabs = {}

  self.tabsWidget = wibox.widget({
    forced_width = s.geometry.width,
    layout  = wibox.layout.flex.horizontal,
  })

  self.wibar = awful.wibar({
    screen = s,
    position = 'top',
    bg = palette.darkGray,
    height = TAGBAR_HEIGHT,
    type = 'dock', -- remove box shadows
    widget = self.tabsWidget,
  })

  self:refresh()
  s:connect_signal('tag::history::update', () -> self:refresh())
}

function Tagbar:getActiveTab() {
  for i, tab in ipairs(self.tabs) {
    if tab.tag == self.screen.selected_tag {
      return tab, i
    }
  }
}

function Tagbar:getNextTab(tabIndex, reverse = false) {
  local nextTabIndex = reverse 
    && (tabIndex == 1 && #self.tabs || tabIndex - 1)
    || (tabIndex == #self.tabs && 1 || tabIndex + 1)
  return self.tabs[nextTabIndex], nextTabIndex
}

function Tagbar:open() {
  awful.tag.add(tostring(#self.screen.tags), {
    screen = self.screen,
    layout = awful.layout.layouts[1]
  }):view_only()
}

function Tagbar:close() {
  local numVisibleTags = 0

  for _, tag in ipairs(self.screen.tags) {
    if !tag.name:match('^_') {
      numVisibleTags += 1
    }
  }

  if numVisibleTags > 1 {
    self.screen.selected_tag:delete()
  }
}

function Tagbar:move(reverse = false) {
  local numTabs = #self.tabs
  local activeTab, activeTabIndex = self:getActiveTab()

  local canMove = numTabs > 1
    && (reverse || activeTabIndex < numTabs)
    && (!reverse || activeTabIndex > 1)

  if canMove {
    local nextTab, nextTabIndex = self:getNextTab(activeTabIndex, reverse)
    self.tabs[activeTabIndex] = nextTab
    self.tabs[nextTabIndex] = activeTab
    self.tabsWidget:swap(activeTabIndex, nextTabIndex)
    activeTab.tag:swap(nextTab.tag)
  }
}

function Tagbar:focus(reverse = false, skipDisabled = true) {
  if #self.tabs < 2 { return }

  local activeTab, activeTabIndex = self:getActiveTab()
  local nextTab, nextTabIndex = self:getNextTab(activeTabIndex, reverse)

  while skipDisabled && nextTab.disabled {
    if nextTab == activeTab { break }
    nextTab, nextTabIndex = self:getNextTab(nextTabIndex, reverse)
  }

  if nextTab != activeTab {
    nextTab.tag:view_only()
  }
}

function Tagbar:refresh() {
  local newTabs = {}
  local children = {}

  for _, tag in ipairs(self.screen.tags) {
    if !tag.name:match('^_') {
      local tagTab = nil

      for _, tab in ipairs(self.tabs) {
        if tab.tag == tag {
          tagTab = tab
          break
        }
      }

      tagTab ||= Object(Tab, tag)
      table.insert(newTabs, tagTab)
      table.insert(children, tagTab.rootWidget)
    }
  }

  self.tabs = newTabs
  self.tabsWidget.children = children
}

-- -----------------------------------------------------------------------------
-- Setup
-- -----------------------------------------------------------------------------

local tagbars = {}

function getCurrentTagbar() {
  local currentScreen = awful.screen.focused()
  for _, tagbar in ipairs(tagbars) {
    if tagbar.screen == currentScreen {
      return tagbar
    }
  }
}

gears.table.merge(globalKeys, {
  awful.key({ 'Mod4' }, 't', () -> getCurrentTagbar():open()),
  awful.key({ 'Mod4' }, 'w', () -> getCurrentTagbar():close()),
  awful.key({ 'Mod4', 'Shift' }, ',', () -> getCurrentTagbar():move(true)),
  awful.key({ 'Mod4', 'Shift' }, '.', () -> getCurrentTagbar():move()),
  awful.key({ 'Mod4' }, 'Tab', () -> getCurrentTagbar():focus()),
  awful.key({ 'Mod4', 'Shift' }, 'Tab', () -> getCurrentTagbar():focus(true)),
  awful.key({ 'Mod4', 'Control' }, 'Tab', () -> getCurrentTagbar():focus(false, false)),
  awful.key({ 'Mod4', 'Control', 'Shift' }, 'Tab', () -> getCurrentTagbar():focus(true, false)),
  awful.key({ 'Mod4', 'Shift' }, 't', () -> getCurrentTagbar():getActiveTab():rename()),
  awful.key({ 'Mod4', 'Control' }, 't', () -> getCurrentTagbar():getActiveTab():toggle()),
})

awful.screen.connect_for_each_screen(s -> table.insert(tagbars, Object(Tagbar, s)))
awful.screen.disconnect_for_each_screen(s -> {
  for i, tagbar in ipairs(tagbars) {
    if tagbar.screen == s {
      table.remove(tagbars, i)
      break
    }
  }
})
