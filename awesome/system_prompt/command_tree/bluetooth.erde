local models = require('models')

-- -----------------------------------------------------------------------------
-- Generators
-- -----------------------------------------------------------------------------

local function bluetooth_connect() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired_state == 'paired' && device.connected_state == 'disconnected' {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:connect(),
      })
    }
  }

  return tree
}

local function bluetooth_disconnect() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.connected_state == 'connected' {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:disconnect(),
      })
    }
  }

  return tree
}

local function bluetooth_pair() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired_state == 'unpaired' {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:pair(),
      })
    }
  }

  return tree
}

local function bluetooth_forget() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired_state == 'paired' {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:remove(),
      })
    }
  }

  return tree
}

-- -----------------------------------------------------------------------------
-- Bluetooth
-- -----------------------------------------------------------------------------

return {
  label = 'bluetooth',
  description = require('system_prompt.command_tree_descriptions.bluetooth'),
  {
    label = 'connect',
    type = 'generate',
    callback = bluetooth_connect,
  },
  {
    label = 'disconnect',
    type = 'generate',
    callback = bluetooth_disconnect,
  },
  {
    label = 'pair',
    type = 'generate',
    callback = bluetooth_pair,
    view = require('system_prompt.command_tree_views.bluetooth_pair'),
    on_enter = () -> models.bluetooth.adapter:scan_on(),
    on_exit = () -> models.bluetooth.adapter:scan_off(),
  },
  {
    label = 'forget',
    type = 'generate',
    callback = bluetooth_forget,
  },
  {
    label = 'toggle',
    type = 'multiple',
    callback = () -> {
      if models.bluetooth.adapter.powered {
        models.bluetooth.adapter:power_off()
      } else {
        models.bluetooth.adapter:power_on()
      }
    },
  },
}
