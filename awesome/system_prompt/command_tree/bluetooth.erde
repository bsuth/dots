local models = require('models')

-- -----------------------------------------------------------------------------
-- Generators
-- -----------------------------------------------------------------------------

local function bluetooth_connect() {
  local tree = {}

  for object_path, device in pairs(models.bluetooth.devices) {
    if device.paired && !device.connected {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:connect(),
      })
    }
  }

  return tree
}

local function bluetooth_disconnect() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.connected {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:disconnect(),
      })
    }
  }

  return tree
}

local function bluetooth_pair() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if !device.paired {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:pair(),
      })
    }
  }

  return tree
}

local function bluetooth_remove() {
  local tree = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired {
      table.insert(tree, {
        label = device.name,
        type = 'multiple',
        callback = () -> device:remove(),
      })
    }
  }

  return tree
}

-- -----------------------------------------------------------------------------
-- Bluetooth
-- -----------------------------------------------------------------------------

return {
  label = 'bluetooth',
  description = require('system_prompt.command_tree_descriptions.bluetooth'),
  {
    label = 'connect',
    type = 'generate',
    callback = bluetooth_connect,
  },
  {
    label = 'disconnect',
    type = 'generate',
    callback = bluetooth_disconnect,
  },
  {
    label = 'pair',
    type = 'generate',
    callback = bluetooth_pair,
  },
  {
    label = 'remove',
    type = 'generate',
    callback = bluetooth_remove,
  },
  {
    label = 'power on',
    type = 'multiple',
    callback = () -> models.bluetooth.adapter:power_on(),
  },
  {
    label = 'power off',
    type = 'multiple',
    callback = () -> models.bluetooth.adapter:power_off(),
  },
  {
    label = 'start discovery',
    type = 'multiple',
    callback = () -> models.bluetooth.adapter:start_discovery(),
  },
  {
    label = 'stop discovery',
    type = 'multiple',
    callback = () -> models.bluetooth.adapter:stop_discovery(),
  },
}
