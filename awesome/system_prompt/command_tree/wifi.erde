local awful = require('awful')
local models = require('models')
local { NM_802_11_AP_SEC_KEY_MGMT_PSK } = require('utils.network_manager')

local unpack = unpack || table.unpack

-- -----------------------------------------------------------------------------
-- Generators
-- -----------------------------------------------------------------------------

local function wifi_connect() {
  local tree = {}

  local connect_access_point_ssids = {}
  local connect_access_points = {}

  for _, access_point in ipairs(models.wifi.device.access_points) {
    local is_valid_access_point = (
      access_point.ssid &&
      access_point.rsn_flags &&
      access_point.strength &&
      !connect_access_point_ssids[access_point.ssid] &&
      access_point != models.wifi.device.active_access_point
    )

    if is_valid_access_point {
      connect_access_point_ssids[access_point.ssid] = true
      table.insert(connect_access_points, access_point)
    }
  }

  table.sort(connect_access_points, (a, b) -> a.strength > b.strength)

  for _, access_point in ipairs(connect_access_points) {
    local access_point_connection_object_path = models.wifi:get_ssid_connection_object_path(access_point.ssid)

    if access_point_connection_object_path {
      table.insert(tree, {
        label = access_point.ssid,
        type = 'multiple',
        callback = () -> models.wifi:activate_connection(access_point_connection_object_path),
        hover_view = require('system_prompt.command_tree_views.wifi_connect_hover'),
        hover_view_args = { access_point = access_point },
      })
    } elseif access_point.rsn_flags == 0 {
      table.insert(tree, {
        label = access_point.ssid,
        type = 'multiple',
        callback = () -> models.wifi:add_and_activate_connection(access_point.ssid),
        hover_view = require('system_prompt.command_tree_views.wifi_connect_hover'),
        hover_view_args = { access_point = access_point },
      })
    } elseif access_point.rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_PSK != 0 {
      table.insert(tree, {
        label = access_point.ssid,
        type = 'view',
        view = require('system_prompt.command_tree_views.wifi_connect'),
        view_args = { ssid = access_point.ssid },
        hover_view = require('system_prompt.command_tree_views.wifi_connect_hover'),
        hover_view_args = { access_point = access_point },
      })
    }
  }

  return tree
}

local function wifi_forget() {
  local tree = {}

  for object_path, { ssid } in pairs(models.wifi.settings.connections) {
    table.insert(tree, {
      label = ssid,
      type = 'multiple',
      callback = () -> models.wifi.settings:delete(object_path),
    })
  }

  return tree
}

local function wifi_password_show() {
  local tree = {}

  for _, { ssid, security } in pairs(models.wifi.settings.connections) {
    if security == 'wpa-psk' {
      table.insert(tree, {
        label = ssid,
        type = 'view',
        view = require('system_prompt.command_tree_views.wifi_password_show'),
        view_args = { ssid = ssid },
      })
    }
  }

  return tree
}

local function wifi_password_copy() {
  local tree = {}

  for object_path, { ssid, security } in pairs(models.wifi.settings.connections) {
    if security == 'wpa-psk' {
      table.insert(tree, {
        label = ssid,
        type = 'once',
        callback = () -> models.wifi.settings:get_secrets(object_path, psk -> {
          awful.spawn.with_shell("printf '{ psk }' | xclip -sel c")
        }),
      })
    }
  }

  return tree
}

-- -----------------------------------------------------------------------------
-- Wifi
-- -----------------------------------------------------------------------------

return {
  label = 'wifi',
  description = require('system_prompt.command_tree_descriptions.wifi'),
  {
    label = 'connect',
    type = 'generate',
    callback = wifi_connect,
  },
  {
    label = 'scan',
    type = 'multiple',
    callback = () -> models.wifi.device:scan(),
  },
  {
    label = 'disconnect',
    type = 'multiple',
    callback = () -> models.wifi.device:disconnect(),
  },
  {
    label = 'forget',
    type = 'generate',
    callback = wifi_forget,
  },
  {
    label = 'password',
    {
      label = 'show',
      type = 'generate',
      callback = wifi_password_show,
    },
    {
      label = 'copy',
      type = 'generate',
      callback = wifi_password_copy,
    },
  },
}
