local awful = require('awful')
local Prompt = require('components.Prompt')
local Veil = require('components.Veil')
local command_tree = require('system_prompt.command_tree')
local { SYSTEM_PROMPT_FONT } = require('system_prompt.constants')
local Object = require('utils.Object')

local unpack = unpack || table.unpack

local store = {}

-- -----------------------------------------------------------------------------
-- Private
-- -----------------------------------------------------------------------------

function store:_init() {
  self.veil = Veil({
    color = '#000000dd',
  })

  self.prompt = Prompt({
    font = SYSTEM_PROMPT_FONT,
    keybindings = {
      { {}, 'Up', () -> self:prev() },
      { {}, 'Down', () -> self:next() },
      { { 'Control' }, 'p', () -> self:prev() },
      { { 'Control' }, 'n', () -> self:next() },
      { { 'Shift' }, 'Tab', () -> self:prev() },
      { {}, 'Tab', () -> self:next() },
      { {}, 'Escape', () -> self:back() },
      { { 'Control' }, 'r', () -> self:_update_filter() },
      { { 'Mod4' }, ';', () -> self.prompt:cancel() },
      { { 'Mod4' }, ';', () -> self.prompt:cancel() },
    },
  })

  self.prompt:subscribe('user_change', () -> self:_update_filter())
  self.prompt:subscribe('stop', reason -> {
    if reason == 'cancel' {
      self:_on_prompt_cancel()
    } elseif reason == 'submit' {
      self:_on_prompt_submit()
    }
  })

  self.path = {}
}

function store:_traverse_node(node) {
  if node.type == 'generate' {
    return ipairs(node.callback())
  } else {
    return ipairs(node)
  }
}

function store:_traverse_command_tree() {
  local node = command_tree
  local path_index = 1

  return () -> {
    local path_part = self.path[path_index]
    path_index += 1

    for _, child in self:_traverse_node(node) {
      if child.label == path_part {
        node = child
        return node
      }
    }
  }
}

function store:_on_change_path() {
  local new_description = command_tree.description

  for node in self:_traverse_command_tree() {
    new_description = node.description || new_description
  }

  self.description = new_description

  self:_update_active_node()
}

function store:_on_change_selected_child() {
  if self.active_node.type != 'view' {
    if self.selected_child && self.selected_child.hover_view {
      self.view = self.selected_child.hover_view
      self.view:update(self.selected_child.hover_view_args)
    } else {
      self.view = nil
    }
  }
}

function store:_on_prompt_cancel() {
  self.veil.active = false
  self.path = {}
}

function store:_on_prompt_submit() {
  if !self.selected_child {
    self.prompt:start(self.prompt.text)
  } elseif self.selected_child.type == 'once' {
    self.selected_child.callback()
    self.veil.active = false
    self.path = {}
  } elseif self.selected_child.type == 'multiple' {
    self.selected_child.callback()
    self.prompt:start()
    self:_update_filter()
  } elseif self.selected_child.type == 'view' {
    self.prompt.root_widget.visible = false

    self.view = self.selected_child.view
    self.view:start(self.selected_child.view_args)
    self.view:once('stop', () -> {
      self.view = nil
      self.prompt.root_widget.visible = true
      self.prompt:start()
      self:back()
    })

    local new_path = { unpack(self.path) }
    table.insert(new_path, self.selected_child.label)
    self.path = new_path
  } else {
    self.prompt:start()

    local new_path = { unpack(self.path) }
    table.insert(new_path, self.selected_child.label)
    self.path = new_path
  }
}

function store:_update_active_node() {
  local new_active_node = command_tree
  for node in self:_traverse_command_tree() {
    new_active_node = node
  }

  self.active_node = new_active_node
  self:_update_filter()
}

function store:_update_filter() {
  local new_filtered_active_node = {}

  for _, child in self:_traverse_node(self.active_node) {
    if child.label:lower():find(self.prompt.text:lower()) {
      table.insert(new_filtered_active_node, child)
    }
  }

  self.filtered_active_node = new_filtered_active_node
  self.selected_child_index = 1
  self.selected_child = self.filtered_active_node[self.selected_child_index]
}

-- -----------------------------------------------------------------------------
-- Public
-- -----------------------------------------------------------------------------

function store:back() {
  if self.prompt.text != '' {
    self.prompt.text = ''
    self.prompt.cursor = 0
    self:_update_filter()
  } elseif #self.path > 0 {
    local new_path = { unpack(self.path) }
    table.remove(new_path)
    self.path = new_path
  } else {
    self.prompt:cancel()
  }
}

function store:prev() {
  self.selected_child_index = ((self.selected_child_index - 2) % #self.filtered_active_node) + 1
  self.selected_child = self.filtered_active_node[self.selected_child_index]
}

function store:next() {
  self.selected_child_index = (self.selected_child_index % #self.filtered_active_node) + 1
  self.selected_child = self.filtered_active_node[self.selected_child_index]
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Object(store)
