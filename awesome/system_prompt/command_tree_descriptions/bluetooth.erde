local wibox = require('wibox')
local { palette } = require('core.theme')
local models = require('models')
local Card = require('components.Card')
local Class = require('utils.Class')
local svg = require('utils.svg')

-- -----------------------------------------------------------------------------
-- Adapter Powered
-- -----------------------------------------------------------------------------

local adapter_powered = Card({ icon = svg('battery-charging', palette.black) })

local function update_adapter_powered() {
  if models.bluetooth.adapter.powered {
    adapter_powered.text = 'true'
    adapter_powered.bg = palette.green
  } else {
    adapter_powered.text = 'false'
    adapter_powered.bg = palette.red
  }
}

update_adapter_powered()
models.bluetooth.adapter:subscribe('change_powered', update_adapter_powered)

-- -----------------------------------------------------------------------------
-- Adapter Discovering
-- -----------------------------------------------------------------------------

local adapter_discovering = Card({ icon = svg('signal', palette.black) })

local function update_adapter_discovering() {
  if models.bluetooth.adapter.discovering {
    adapter_discovering.text = 'true'
    adapter_discovering.bg = palette.green
  } else {
    adapter_discovering.text = 'false'
    adapter_discovering.bg = palette.red
  }
}

update_adapter_discovering()
models.bluetooth.adapter:subscribe('change_discovering', update_adapter_discovering)

-- -----------------------------------------------------------------------------
-- KnownDevice
-- -----------------------------------------------------------------------------

local KnownDevice = Class()

function KnownDevice:_init(name) {
  self._background_widget = wibox.widget({
    {
      text = name,
      font = 'Quicksand Regular 20',
      align = 'center',
      valign = 'center',
      widget = wibox.widget.textbox,
    },
    fg = palette.white,
    widget = wibox.container.background,
  })

  self.root_widget = wibox.widget({
    self._background_widget,
    widget = wibox.container.place,
  })
}

function KnownDevice:_on_change_paired_state() {
  self:_update()
}

function KnownDevice:_on_change_connected_state() {
  self:_update()
}

function KnownDevice:_update() {
  local has_transition_state = (
    self.paired_state == 'pairing' ||
    self.paired_state == 'unpairing' ||
    self.connected_state == 'connecting' ||
    self.connected_state == 'disconnecting'
  )

  self._background_widget.fg = has_transition_state
    && palette.yellow
    || self.connected_state == 'connected'
    && palette.green
    || palette.white
}

-- -----------------------------------------------------------------------------
-- Known Devices
-- -----------------------------------------------------------------------------

local known_devices = {}

local known_devices_widget = wibox.widget({
  spacing = 8,
  layout = wibox.layout.fixed.vertical,
})

local function update_known_devices() {
  local new_known_devices = {}
  local new_children = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired_state != 'unpaired' {
      local known_device = known_devices[device.name] || KnownDevice(device.name)

      known_device.paired_state = device.paired_state
      known_device.connected_state = device.connected_state

      new_known_devices[device.name] = known_device
      table.insert(new_children, known_device.root_widget)
    }
  }

  known_devices = new_known_devices
  known_devices_widget.children = new_children
}

models.bluetooth:subscribe('device_added', device -> {
  device:subscribe('change_connected_state', update_known_devices)
  device:subscribe('change_paired_state', update_known_devices)

  if device.paired_state != 'unpaired' {
    update_known_devices()
  }
})

models.bluetooth:subscribe('device_removed', device -> {
  device:unsubscribe('change_connected_state', update_known_devices)
  device:unsubscribe('change_paired_state', update_known_devices)

  if device.paired_state != 'unpaired' {
    update_known_devices()
  }
})

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return wibox.widget({
  {
    {
      {
        adapter_powered.root_widget,
        adapter_discovering.root_widget,
        spacing = 8,
        layout = wibox.layout.fixed.horizontal,
      },
      widget = wibox.container.place,
    },
    known_devices_widget,
    spacing = 64,
    spacing_widget = {
      thickness = 1,
      color = palette.white,
      widget = wibox.widget.separator,
    },
    layout = wibox.layout.fixed.vertical,
  },
  widget = wibox.container.place,
})
