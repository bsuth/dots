local wibox = require('wibox')
local models = require('models')
local Class = require('utils.Class')
local Object = require('utils.Object')

local pair_device_widgets = {}

local pair_devices_list_widget = wibox.widget({
  spacing = 16,
  layout = wibox.layout.fixed.vertical,
})

local function update_pair_devices() {
  local new_pair_device_widgets = {}
  local new_children = {}

  for _, device in pairs(models.bluetooth.devices) {
    if device.paired_state == 'unpaired' {
      local pair_device_widget = pair_device_widgets[device.name] || wibox.widget({
        text = device.name,
        font = 'Quicksand Regular 20',
        widget = wibox.widget.textbox,
      })

      new_pair_device_widgets[device.name] = pair_device_widget
      table.insert(new_children, pair_device_widget)
    }
  }

  pair_device_widgets = new_pair_device_widgets
  pair_devices_list_widget.children = new_children
}

update_pair_devices()

models.bluetooth:subscribe('device_added', device -> {
  device:subscribe('change_paired_state', update_pair_devices)

  if device.paired_state == 'unpaired' {
    update_pair_devices()
  }
})

models.bluetooth:subscribe('device_removed', device -> {
  device:unsubscribe('change_paired_state', update_pair_devices)

  if device.paired_state == 'unpaired' {
    update_pair_devices()
  }
})

return Object({
  _init = () => {
    self.root_widget = wibox.widget({
      pair_devices_list_widget,
      widget = wibox.container.place,
    })
  },
})
