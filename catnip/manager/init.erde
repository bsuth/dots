local catnip = require('catnip')
local keymap = require('keymap')
local { get_box_center, get_closest_box, is_point_in_box, swap_boxes } = require('utils.box')
local { desktops, focused, window_buffer } = require('manager.state')

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function center_cursor(box) {
  local new_cursor_position = get_box_center(box)
  catnip.cursor.x = new_cursor_position.x
  catnip.cursor.y = new_cursor_position.y
}

local function destroy_active_window() {
  if focused.window {
    focused.window:destroy()
  }
}

local function get_relative_state(direction) {
  local closest_local_window, closest_local_window_index = get_closest_box(
    focused.workspace.windows,
    focused.window,
    direction,
  )

  if closest_local_window != nil {
    return {
      window = closest_local_window,
      window_index = closest_local_window_index,
      workspace = focused.workspace,
      desktop = focused.desktop,
    }
  }

  local closest_desktop, closest_desktop_index = get_closest_box(
    desktops,
    focused.desktop,
    direction,
  )

  if closest_desktop == nil {
    return nil
  }

  local closest_global_window, closest_global_window_index = get_closest_box(
    closest_desktop.active_workspace.windows,
    focused.window,
    direction,
  )

  return {
    window = closest_global_window,
    window_index = closest_global_window_index,
    workspace = closest_desktop.active_workspace,
    desktop = closest_desktop,
  }
}

local function activate_relative(direction) {
  local relative_state = get_relative_state(direction)

  if relative_state == nil {
    return
  }

  if relative_state.window != nil {
    relative_state.window.focused = true
    center_cursor(relative_state.window)
  } else {
    center_cursor(relative_state.desktop)
  }
}

local function move_active_window(direction) {
  if focused.window == nil {
    return
  }

  local relative_state = get_relative_state(direction)

  if relative_state == nil {
    return
  }

  if relative_state.desktop != focused.desktop {
    focused.workspace:remove(focused.window_index, false)
    relative_state.workspace:add(focused.window)
  } else {
    focused.workspace[focused.window_index] = relative_state.window
    relative_state.workspace[relative_state.window_index] = focused.window
    swap_boxes(focused.window, relative_state.window)
  }

  center_cursor(focused.window)
}

-- -----------------------------------------------------------------------------
-- Keymaps
-- -----------------------------------------------------------------------------

keymap({ 'mod1' }, 'q', destroy_active_window)
keymap({ 'mod1' }, 'space', () -> os.execute('foot & disown'))

keymap({ 'mod1' }, 't', () -> focused.desktop:push())
keymap({ 'mod1' }, 'w', () -> focused.desktop:pop())
keymap({ 'mod1' }, 'Tab', () -> focused.desktop:cycle())
keymap({ 'mod1', 'shift' }, 'ISO_Left_Tab', () -> focused.desktop:cycle(true))

keymap({ 'mod1' }, 'h', () -> activate_relative('left'))
keymap({ 'mod1' }, 'j', () -> activate_relative('down'))
keymap({ 'mod1' }, 'k', () -> activate_relative('up'))
keymap({ 'mod1' }, 'l', () -> activate_relative('right'))

keymap({ 'mod1' }, 'H', () -> move_active_window('left'))
keymap({ 'mod1' }, 'J', () -> move_active_window('down'))
keymap({ 'mod1' }, 'K', () -> move_active_window('up'))
keymap({ 'mod1' }, 'L', () -> move_active_window('right'))

keymap({ 'mod1' }, 'm', () -> window_buffer:push())
keymap({ 'mod1' }, 'M', () -> window_buffer:pop())

-- -----------------------------------------------------------------------------
-- Subscriptions
-- -----------------------------------------------------------------------------

catnip.subscribe('window::create', window -> {
  focused.workspace:add(window)
  window.focused = true
  center_cursor(window)
})

catnip.subscribe('window::destroy', window -> {
  for _, desktop in pairs(desktops) {
    for _, workspace in ipairs(desktop.workspaces) {
      local window_index = select(2, table.find(workspace.windows, window))
      if window_index != nil {
        workspace:remove(window_index)
        return
      }
    }
  }
})

catnip.cursor:subscribe('button::press', button => {
  for _, desktop in pairs(desktops) {
    for _, window in ipairs(desktop.active_workspace.windows) {
      if is_point_in_box(catnip.cursor, window) {
        window.focused = true
        return
      }
    }
  }
})
