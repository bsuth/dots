local catnip = require('catnip')
local Desktop = require('manager.Desktop')
local { is_point_in_box } = require('utils.box')

-- -----------------------------------------------------------------------------
-- Desktops
-- -----------------------------------------------------------------------------

module desktops = {}

catnip.subscribe('output::init', output -> {
  desktops[output.id] = Desktop(output)
})

catnip.subscribe('output::destroy', output -> {
  desktops[output.id] = nil
})

-- -----------------------------------------------------------------------------
-- Focused State
-- -----------------------------------------------------------------------------

module focused = {}

local function update_focused_state() {
  for _, desktop in pairs(desktops) {
    for window_index, window in ipairs(desktop.active_workspace.windows) {
      if window.focused {
        focused.window = window
        focused.window_index = window_index
        focused.workspace = desktop.active_workspace
        focused.workspace_index = desktop.active_workspace_index
        focused.desktop = desktop
        return
      }
    }
  }

  for _, desktop in pairs(desktops) {
    if is_point_in_box(catnip.cursor, desktop) {
      focused.window = nil
      focused.window_index = nil
      focused.workspace = desktop.active_workspace
      focused.workspace_index = desktop.active_workspace_index
      focused.desktop = desktop
      return
    }
  }
}

update_focused_state()
catnip.subscribe('window::property::focused', update_focused_state)

-- -----------------------------------------------------------------------------
-- Window Buffer
-- -----------------------------------------------------------------------------

module window_buffer = {}

for _, window in pairs(catnip.windows) {
  -- Save all windows in the window buffer by default
  -- TODO: save / restore windows to their respective workspace
  window.visible = false
  table.insert(window_buffer, window)
}

function window_buffer:push() {
  if focused.window == nil {
    return
  }

  local num_windows = #focused.workspace.windows

  if num_windows > 1 {
    if focused.window_index < num_windows {
      focused.workspace.windows[focused.window_index + 1].focused = true
    } else {
      focused.workspace.windows[focused.window_index - 1].focused = true
    }
  }

  focused.workspace:remove(focused.window_index)
  table.insert(window_buffer, focused.window)
  focused.window.visible = false
}

function window_buffer:pop() {
  local window = table.remove(window_buffer, 1)

  if window == nil {
    return
  }

  focused.workspace:add(window)
  window.visible = true
  window.focused = true
}
