local catnip = require('catnip')
local Desktop = require('manager.Desktop')
local { is_point_in_box } = require('utils.box')

-- -----------------------------------------------------------------------------
-- Desktops
-- -----------------------------------------------------------------------------

module desktops = {}

catnip.subscribe('output::init', output -> {
  desktops[output.id] = Desktop(output)
})

catnip.subscribe('output::destroy', output -> {
  desktops[output.id] = nil
})

-- -----------------------------------------------------------------------------
-- Active State
-- -----------------------------------------------------------------------------

module active_state = {}

function active_state:update() {
  for output_id, desktop in pairs(desktops) {
    for window_index, window in ipairs(desktop.active_workspace.windows) {
      if window.active {
        self.window = window
        self.window_index = window_index
        self.workspace = desktop.active_workspace
        self.workspace_index = desktop.active_workspace_index
        self.desktop = desktop
        return self
      }
    }
  }

  for output_id, desktop in pairs(desktops) {
    if is_point_in_box(catnip.cursor, desktop.box) {
      self.window = nil
      self.window_index = nil
      self.workspace = desktop.active_workspace
      self.workspace_index = desktop.active_workspace_index
      self.desktop = desktop
      return self
    }
  }
}

active_state:update()

-- -----------------------------------------------------------------------------
-- Window Buffer
-- -----------------------------------------------------------------------------

module window_buffer = {}

for _, window in pairs(catnip.windows) {
  -- Save all windows in the window buffer by default
  -- TODO: save / restore windows to their respective workspace
  window.visible = false
  table.insert(window_buffer, window)
}

function window_buffer:push() {
  if active_state.window == nil {
    return
  }

  local num_windows = #active_state.workspace.windows

  if num_windows > 1 {
    if active_state.window_index < num_windows {
      active_state.workspace.windows[active_state.window_index + 1].active = true
    } else {
      active_state.workspace.windows[active_state.window_index - 1].active = true
    }
  }

  active_state.workspace:remove(active_state.window)
  table.insert(window_buffer, active_state.window)
  active_state.window.visible = false
}

function window_buffer:pop() {
  local window = table.remove(window_buffer, 1)

  if window == nil {
    return
  }

  active_state.workspace:add(window)
  window.visible = true
  window.active = true
}
