local tile = require('tile')
local Class = require('utils.Class')

local TILE_GAP = 4

local TILE_PADDING = {
  top = 4,
  right = 4,
  bottom = 4,
  left = 4,
}

local Workspace = Class()

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function custom_tile(windows, box) {
  local num_windows = #windows

  local layout = {
    gap = TILE_GAP,
    x = box.x + TILE_PADDING.left,
    y = box.y + TILE_PADDING.top,
    width = box.width - (TILE_PADDING.right + TILE_PADDING.left),
    height = box.height - (TILE_PADDING.top + TILE_PADDING.bottom ),
  }

  if layout.width < layout.height {
    if num_windows < 3 {
      tile.split_vertical(windows, layout)
    } else {
      tile.grid_vertical(windows, layout)
    }
  } elseif num_windows < 4 {
    tile.master_left(windows, layout)
  } else {
    tile.grid_horizontal(windows, layout)
  }
}

-- -----------------------------------------------------------------------------
-- Private
-- -----------------------------------------------------------------------------

function Workspace:_init(box) {
  self._box = box
  self._last_focused_window = nil
  self.windows = {}
  self.visible = true
}

-- Allow Workspace to be treated as a box
Workspace._get_x = () => self._box.x
Workspace._get_y = () => self._box.y
Workspace._get_width = () => self._box.width
Workspace._get_height = () => self._box.height

function Workspace:_on_change_visible(new_visible) {
  if !new_visible {
    self._last_focused_window = table.find(self.windows, window -> window.focused)
  }

  if self._last_focused_window != nil {
    self._last_focused_window.focused = new_visible
  }

  for _, window in ipairs(self.windows) {
    window.visible = new_visible
  }
}

-- -----------------------------------------------------------------------------
-- Public
-- -----------------------------------------------------------------------------

function Workspace:add(window) {
  table.insert(self.windows, window)
  custom_tile(self.windows, self._box)
}

function Workspace:remove(window_index, fallback = true) {
  if fallback && self.windows[window_index].focused {
    local num_windows = #self.windows

    if num_windows > 1 {
      if window_index < num_windows {
        self.windows[window_index + 1].focused = true
      } else {
        self.windows[window_index - 1].focused = true
      }
    }
  }

  table.remove(self.windows, window_index)
  custom_tile(self.windows, self._box)
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Workspace
