local tile = require('manager.tile')
local Class = require('utils.Class')

local Workspace = Class()

-- -----------------------------------------------------------------------------
-- Private
-- -----------------------------------------------------------------------------

function Workspace:_init(box) {
  self._box = box
  self._last_focused_window = nil
  self.windows = {}
  self.visible = true
}

-- Allow Workspace to be treated as a box
Workspace._get_x = () => self._box.x
Workspace._get_y = () => self._box.y
Workspace._get_width = () => self._box.width
Workspace._get_height = () => self._box.height

function Workspace:_on_change_visible(new_visible) {
  if !new_visible {
    self._last_focused_window = table.find(self.windows, window -> window.focused)
  }

  if self._last_focused_window != nil {
    self._last_focused_window.focused = new_visible
  }

  for _, window in ipairs(self.windows) {
    window.visible = new_visible
  }
}

-- -----------------------------------------------------------------------------
-- Public
-- -----------------------------------------------------------------------------

function Workspace:add(window) {
  table.insert(self.windows, window)
  tile(self._box, self.windows)
}

function Workspace:remove(window_index, fallback = true) {
  if fallback && self.windows[window_index].focused {
    local num_windows = #self.windows

    if num_windows > 1 {
      if window_index < num_windows {
        self.windows[window_index + 1].focused = true
      } else {
        self.windows[window_index - 1].focused = true
      }
    }
  }

  table.remove(self.windows, window_index)
  tile(self._box, self.windows)
}

-- -----------------------------------------------------------------------------
-- Return
-- -----------------------------------------------------------------------------

return Workspace
