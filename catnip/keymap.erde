local catnip = require('catnip')

local key_event_callbacks = {}

local function get_key_event_callbacks(event) {
  local is_printable_ascii = 32 < event.code && event.code < 127
  return key_event_callbacks[
    table.concat({
      (event.shift && !is_printable_ascii) && 1 || 0,
      event.ctrl && 1 || 0,
      event.mod1 && 1 || 0,
      event.mod2 && 1 || 0,
      event.mod3 && 1 || 0,
      event.mod4 && 1 || 0,
      event.mod5 && 1 || 0,
      is_printable_ascii && string.char(event.code) || event.name,
    })
  ]
}

catnip.subscribe('keyboard::key::press', (keyboard, event) -> {
  if get_key_event_callbacks(event) != nil {
    event.prevent_notify = true
  }
})

catnip.subscribe('keyboard::key::release', (keyboard, event) -> {
  local callbacks = get_key_event_callbacks(event)

  if callbacks == nil {
    return
  }

  event.prevent_notify = true

  for _, callback in ipairs(callbacks) {
    callback()
  }
})

return (modifiers, key, callback) -> {
  local id_parts = { 0, 0, 0, 0, 0, 0, 0, key }

  for _, modifier in ipairs(modifiers) {
    if modifier == 'shift' {
      id_parts[1] = 1
    } elseif modifier == 'ctrl' {
      id_parts[2] = 1
    } elseif modifier == 'mod1' {
      id_parts[3] = 1
    } elseif modifier == 'mod2' {
      id_parts[4] = 1
    } elseif modifier == 'mod3' {
      id_parts[5] = 1
    } elseif modifier == 'mod4' {
      id_parts[6] = 1
    } elseif modifier == 'mod5' {
      id_parts[7] = 1
    }
  }

  local id = table.concat(id_parts)
  key_event_callbacks[id] ||= {}
  table.insert(key_event_callbacks[id], callback)
}
