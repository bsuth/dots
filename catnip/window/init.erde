local catnip = require('catnip')
local keymap = require('keymap')
local Desktop = require('window.Desktop')
local { is_point_in_box } = require('utils.bounds')

local desktops = {}
local window_buffer = {}

-- -----------------------------------------------------------------------------
-- Init
-- -----------------------------------------------------------------------------

do {
  for _, output in ipairs(catnip.outputs) {
    table.insert(desktops, Desktop(output))
  }

  for _, window in ipairs(catnip.windows) {
    -- Save all windows in the window buffer by default
    -- TODO: save / restore windows to their respective workspace
    window.visible = false
    table.insert(window_buffer, window)
  }
}

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function get_active_state() {
  for desktop_index, desktop in ipairs(desktops) {
    for window_index, window in ipairs(desktop.active_workspace.windows) {
      if window.active {
        return {
          active_window = window,
          active_window_index = window_index,
          active_workspace = desktop.active_workspace,
          active_workspace_index = desktop.active_workspace_index,
          active_desktop = desktop,
        }
      }
    }
  }

  for desktop_index, desktop in ipairs(desktops) {
    if is_point_in_box(catnip.cursor, desktop.box) {
      return {
        active_workspace = desktop.active_workspace,
        active_workspace_index = desktop.active_workspace_index,
        active_desktop = desktop,
      }
    }
  }
}

local function activate_relative_window(direction) {
  local { active_window, active_workspace } = get_active_state()
  local new_active_window = active_workspace:get_relative_window(active_window, direction)

  if new_active_window == nil {
    return
  }

  new_active_window.active = true
}

local function swap_active_and_relative_window(direction) {
  local { active_window, active_workspace } = get_active_state()
  active_workspace:swap_relative_window(active_window, direction)
}

-- -----------------------------------------------------------------------------
-- Keymaps
-- -----------------------------------------------------------------------------

keymap({ 'ctrl' }, 'a', () -> os.execute('foot & disown'))

keymap({ 'alt' }, 't', () -> get_active_state().active_desktop:push())
keymap({ 'alt' }, 'w', () -> get_active_state().active_desktop:pop())
keymap({ 'alt' }, 'n', () -> get_active_state().active_desktop:cycle())
keymap({ 'alt' }, 'p', () -> get_active_state().active_desktop:cycle(true))

keymap({ 'alt' }, 'h', () -> activate_relative_window('left'))
keymap({ 'alt' }, 'j', () -> activate_relative_window('down'))
keymap({ 'alt' }, 'k', () -> activate_relative_window('up'))
keymap({ 'alt' }, 'l', () -> activate_relative_window('right'))

keymap({ 'alt', 'ctrl' }, 'h', () -> swap_active_and_relative_window('left'))
keymap({ 'alt', 'ctrl' }, 'j', () -> swap_active_and_relative_window('down'))
keymap({ 'alt', 'ctrl' }, 'k', () -> swap_active_and_relative_window('up'))
keymap({ 'alt', 'ctrl' }, 'l', () -> swap_active_and_relative_window('right'))

keymap({ 'alt' }, 'm', () -> {
  local { active_window, active_window_index, active_workspace } = get_active_state()

  if active_window == nil {
    return
  }

  local num_windows = #active_workspace

  if num_windows > 1 {
    if active_window_index < num_windows {
      active_workspace[active_window_index + 1].active = true
    } else {
      active_workspace[active_window_index - 1].active = true
    }
  }

  active_workspace:remove(active_window)
  table.insert(window_buffer, active_window)
  active_window.visible = false
})

keymap({ 'alt', 'shift' }, 'M', () -> {
  local window = table.remove(window_buffer, 1)

  if window == nil {
    return
  }

  local { active_workspace } = get_active_state()
  active_workspace:add(window)

  window.visible = true
  window.active = true
})

-- -----------------------------------------------------------------------------
-- Subscriptions
-- -----------------------------------------------------------------------------

catnip.subscribe('window::create', window -> {
  local { active_workspace } = get_active_state()
  active_workspace:add(window)
})

catnip.subscribe('window::destroy', window -> {
  for _, desktop in ipairs(desktops) {
    for _, workspace in ipairs(desktop.workspaces) {
      workspace:remove(window)
    }
  }
})
