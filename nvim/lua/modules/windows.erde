local { edit } = require('utils.edit')

-- -----------------------------------------------------------------------------
-- Helpers
-- -----------------------------------------------------------------------------

local function is_point_in_rect(point, rect) {
  return (
    (rect.x <= point.x && point.x <= rect.x + rect.width) &&
    (rect.y <= point.y && point.y <= rect.y + rect.height)
  )
}

local function get_window_rect(window) {
  local [ row, column ] = vim.api.nvim_win_get_position(window)
  local width = vim.api.nvim_win_get_width(window)
  local height = vim.api.nvim_win_get_height(window)
  return { x = column, y = row, width = width, height = height }
}

local function split_window(direction) {
  if direction == 'left' {
    vim.cmd("aboveleft vsp { vim.fn.getcwd() }")
  } elseif direction == 'down' {
    vim.cmd("rightbelow sp { vim.fn.getcwd() }")
  } elseif direction == 'up' {
    vim.cmd("aboveleft sp { vim.fn.getcwd() }")
  } elseif direction == 'right' {
    vim.cmd("rightbelow vsp { vim.fn.getcwd() }")
  } else {
    error("Invalid split direction: { direction }")
  }
}

local function swap_window(direction) {
  local current_window = vim.api.nvim_get_current_win()
  local current_window_rect = get_window_rect(current_window)

  local swap_window_point = { x = 0, y = 0 }

  if direction == 'left' {
    swap_window_point.x = current_window_rect.x - 1
    swap_window_point.y = current_window_rect.y
  } elseif direction == 'down' {
    swap_window_point.x = current_window_rect.x
    swap_window_point.y = current_window_rect.y + current_window_rect.height + 1
  } elseif direction == 'up' {
    swap_window_point.x = current_window_rect.x
    swap_window_point.y = current_window_rect.y - 1
  } elseif direction == 'right' {
    swap_window_point.x = current_window_rect.x + current_window_rect.width + 1
    swap_window_point.y = current_window_rect.y
  } else {
    error("Invalid split direction: { direction }")
  }

  for _, window in ipairs(vim.api.nvim_list_wins()) {
    if window != current_window && is_point_in_rect(swap_window_point, get_window_rect(window)) {
      local current_buffer = vim.api.nvim_win_get_buf(current_window)
      vim.api.nvim_win_set_buf(current_window, vim.api.nvim_win_get_buf(window))
      vim.api.nvim_win_set_buf(window, current_buffer)
      vim.cmd("{ vim.api.nvim_win_get_number(window) }wincmd w")
      return
    }
  }
}

-- -----------------------------------------------------------------------------
-- Mappings
-- -----------------------------------------------------------------------------

vim.keymap.set('n', '<c-h>', '<c-w>h')
vim.keymap.set('n', '<c-j>', '<c-w>j')
vim.keymap.set('n', '<c-k>', '<c-w>k')
vim.keymap.set('n', '<c-l>', '<c-w>l')
vim.keymap.set('n', '<c-left>', '<c-w>h')
vim.keymap.set('n', '<c-down>', '<c-w>j')
vim.keymap.set('n', '<c-up>', '<c-w>k')
vim.keymap.set('n', '<c-right>', '<c-w>l')

vim.keymap.set('n', '<leader><c-h>', () -> split_window('left'))
vim.keymap.set('n', '<leader><c-j>', () -> split_window('down'))
vim.keymap.set('n', '<leader><c-k>', () -> split_window('up'))
vim.keymap.set('n', '<leader><c-l>', () -> split_window('right'))
vim.keymap.set('n', '<leader><c-left>', () -> split_window('left'))
vim.keymap.set('n', '<leader><c-down>', () -> split_window('down'))
vim.keymap.set('n', '<leader><c-up>', () -> split_window('up'))
vim.keymap.set('n', '<leader><c-right>', () -> split_window('right'))

vim.keymap.set('n', '<leader><m-h>', () -> swap_window('left'))
vim.keymap.set('n', '<leader><m-j>', () -> swap_window('down'))
vim.keymap.set('n', '<leader><m-k>', () -> swap_window('up'))
vim.keymap.set('n', '<leader><m-l>', () -> swap_window('right'))
vim.keymap.set('n', '<leader><m-left>', () -> swap_window('left'))
vim.keymap.set('n', '<leader><m-down>', () -> swap_window('down'))
vim.keymap.set('n', '<leader><m-up>', () -> swap_window('up'))
vim.keymap.set('n', '<leader><m-right>', () -> swap_window('right'))
