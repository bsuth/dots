-- -----------------------------------------------------------------------------
-- Mappings
-- -----------------------------------------------------------------------------

vim.keymap.set('n', '<c-t>', () -> vim.cmd("tabnew { vim.fn.getcwd() }"))
vim.keymap.set('n', '<Tab>', () -> vim.cmd('tabnext'))
vim.keymap.set('n', '<S-Tab>', () -> vim.cmd('tabprevious'))

-- -----------------------------------------------------------------------------
-- Tabline
-- -----------------------------------------------------------------------------

vim.opt.tabline = "%!v:lua.tabline()"

local function tabline_name(tabpage, width) {
  local window = vim.api.nvim_tabpage_get_win(tabpage)
  local buffer = vim.api.nvim_win_get_buf(window)

  local name = vim.api.nvim_buf_get_name(buffer)
  name = name:gsub('^/home/bsuth', '~')

  local raw_padding = (width - #name) / 2
  local max_name_width = width - raw_padding

  if raw_padding < 1 {
    raw_padding = 1
    -- Truncate to `width - 5`: -2 for padding, -3 for ellipsis
    name = name:sub(1, math.floor(width - 5)) .. '...'
  }

  local left_padding = math.floor(raw_padding)
  local right_padding = math.ceil(raw_padding)

  return table.concat({
    (' '):rep(left_padding),
    name,
    (' '):rep(right_padding),
  })
}

global function tabline() {
  local tabline = {}

  local last_tabpage = vim.fn.tabpagenr('$')
  local current_tabpage = vim.api.nvim_get_current_tabpage()

  local columns = vim.o.columns
  local min_tab_width = math.floor(columns / last_tabpage)
  local width_remainder = columns % last_tabpage

  for _, tabpage in ipairs(vim.api.nvim_list_tabpages()) {
    local tab_width = min_tab_width

    if width_remainder > 0 {
      tab_width += 1
      width_remainder -= 1
    }

    if tabpage == current_tabpage {
      table.insert(tabline, '%#TabLineSel#')
    } else {
      table.insert(tabline, '%#TabLine#')
    }

    table.insert(tabline, tabline_name(tabpage, tab_width))
  }

  return table.concat(tabline)
}
