local { HOME } = require('constants')
local path = require('utils.path')

module function buffer() {
  local actions = {}

  for _, bufinfo in ipairs(vim.fn.getbufinfo()) {
    if bufinfo.listed == 1 {
      table.insert(actions, {
        bufinfo.name,
        () -> vim.api.nvim_win_set_buf(0, bufinfo.bufnr),
        weight = bufinfo.lastused,
      })
    }
  }

  return actions
}

module function directory(cwd = vim.fn.getcwd()) {
  local actions = {}
  local pipe = io.popen("fd --base-directory { cwd } --type d .", 'r')

  for line in pipe:lines() {
    table.insert(actions, { line, () -> vim.cmd("edit { path.join(cwd, line) }") })
  }

  pipe:close()
  return actions
}

module function favorites() {
  local actions = {
    { 'dots', () -> vim.cmd('edit ~/dots') },
    { 'extern', () -> vim.cmd('edit ~/extern') },
    { 'repos', () -> vim.cmd('edit ~/repos') },
  }

  local pipe = io.popen('fd --type d --max-depth 1 --base-directory ~ . dots extern repos', 'r')

  for line in pipe:lines() {
    table.insert(actions, { line, () -> vim.cmd("edit { path.join(HOME, line) }") })
  }

  pipe:close()
  return actions
}

module function file(cwd = vim.fn.getcwd()) {
  local actions = {}
  local pipe = io.popen("fd --base-directory { cwd } --type f .", 'r')

  for line in pipe:lines() {
    table.insert(actions, { line, () -> vim.cmd("edit { path.join(cwd, line) }") })
  }

  pipe:close()
  return actions
}

module function grep(text, cwd = vim.fn.getcwd()) {
  local actions = {}

  if text != '' {
    -- NOTE: Use `cd` over `rg PATTERN PATH` argument since `cd` will preserve
    -- relative paths in `rg` output.
    local pipe = io.popen([[cd { cwd }; rg --fixed-strings --line-number "{ text:gsub('"', '\\"') }"]], 'r')

    for line in pipe:lines() {
      local filepath, row, text = line:match('^([^:]+):([0-9]+):%s*(.*)$')
      table.insert(actions, {
        "{ filepath }: { text }",
        () -> vim.cmd("edit +{ row } { path.join(cwd, filepath) }"),
      })
    }

    pipe:close()
  }

  return actions
}

module function help() {
  local actions = {}

  for _, filepath in ipairs(vim.api.nvim_get_runtime_file('doc/tags', true)) {
    local file = io.open(filepath, 'r')

    for line in file:lines() {
      local [ name ] = line:split()
      local callback = () -> vim.cmd("enew | set buftype=help | help { name }")
      table.insert(actions, { name, callback })
    }

    file:close()
  }

  return actions
}

module function man() {
  local actions = {}
  local pipe = io.popen('apropos .', 'r')

  for line in pipe:lines() {
    local name, section = line:match('^([^%s]+) %(([^%s]+)%)')
    table.insert(actions, {
      line,
      () -> vim.cmd("enew | set filetype=man | Man { name }({ section })"),
      weight = 1 / #name,
    })
  }

  pipe:close()
  return actions
}
