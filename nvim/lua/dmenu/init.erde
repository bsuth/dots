local constructor = require('dmenu.constructor')

local dmenus = {}

local function toggle() {
  local window = vim.api.nvim_get_current_win()

  for _, dmenu in pairs(dmenus) {
    if window == dmenu.window {
      dmenus[window] = nil
      vim.api.nvim_set_current_win(dmenu.restore_window)
      return
    }
  }

  local dmenu = dmenus[window]

  if dmenu && dmenu.window != -1 && window == dmenu.restore_window {
    vim.api.nvim_set_current_win(dmenu.window)
  } else {
    dmenus[window] = constructor(window)
  }
}

vim.keymap.set('i', '<m-space>', toggle)
vim.keymap.set('n', '<m-space>', toggle)

vim.api.nvim_create_autocmd('WinResized', {
  group = 'bsuth',
  callback = () -> {
    for window, dmenu in pairs(dmenus) {
      if dmenu.window != -1 && table.has(vim.api.nvim_get_vvar('event').windows, window) {
        dmenu:resize()
        dmenu:render()
        dmenu:highlight()

        local new_width = vim.api.nvim_win_get_width(window)
        if new_width != vim.api.nvim_win_get_width(dmenu.window) {
          vim.api.nvim_win_set_config(dmenu.window, { width = new_width })
        }
      }
    }
  },
})
