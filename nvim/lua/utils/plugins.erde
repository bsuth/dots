local { HOME, PLUGINS_DIR } = require('constants')
local path = require('utils.path')

-- -----------------------------------------------------------------------------
-- Variables
-- -----------------------------------------------------------------------------

local PLUGINS = {}

-- -----------------------------------------------------------------------------
-- Setup
-- -----------------------------------------------------------------------------

if !io.exists(PLUGINS_DIR) {
  os.execute("mkdir -p { PLUGINS_DIR }")
}

for _, plugin_dir in ipairs(vim.fn.readdir(PLUGINS_DIR)) {
  table.insert(PLUGINS, {
    path = path.join(PLUGINS_DIR, plugin_dir),
    loaded = false,
    config = nil,
  })
}

-- -----------------------------------------------------------------------------
-- API
-- -----------------------------------------------------------------------------

module function use(plugin_name, config) {
  local plugin_dir = (config && config.dir) || path.basename(plugin_name)
  local plugin_path = path.join(PLUGINS_DIR, plugin_dir)
  local plugin = table.find(PLUGINS, plugin -> plugin.path == plugin_path)

  if plugin != nil {
    plugin.loaded = true
    plugin.config = config
    return
  }

  local command = (config && config.symlink)
    && "ln -sn { plugin_dir } { plugin_path }"
    || "git clone --depth 1 https://github.com/{ plugin_name }.git { plugin_path }"

  print(command)
  print(vim.fn.system(command))

  if io.exists(path.join(plugin_path, 'lua')) {
    package.insert(path.join(plugin_path, 'lua/?.lua'))
    package.insert(path.join(plugin_path, 'lua/?/init.lua'))
  }

  if config && type(config.on_install) == 'function' {
    local cwd = vim.fn.getcwd()
    vim.cmd("cd { plugin_path }")
    config.on_install()
    vim.cmd("cd { cwd }")
  }

  table.insert(PLUGINS, {
    path = plugin_path,
    loaded = true,
    config = config,
  })
}

module function update() {
  for _, plugin in ipairs(PLUGINS) {
    local command = "git -C { plugin.path } pull"

    print(command)
    print(vim.fn.system(command))

    if plugin.config && type(plugin.config.on_update) == 'function' {
      local cwd = vim.fn.getcwd()
      vim.cmd("cd { plugin.path }")
      plugin.config.on_update()
      vim.cmd("cd { cwd }")
    }
  }
}

module function clean() {
  local used_plugins = {}
  local unused_plugins = {}

  for _, plugin in ipairs(PLUGINS) {
    if plugin.loaded == true {
      table.insert(used_plugins, plugin)
    } else {
      table.insert(unused_plugins, plugin)
    }
  }

  if #unused_plugins == 0 {
    print('no unused plugins')
    return
  }

  for _, plugin in ipairs(unused_plugins) {
    local basename = path.basename(plugin.path)
    local input = vim.fn.input("remove { basename }?: "):lower()

    if input == 'y' || input == 'yes' {
      vim.fn.system("rm -rf { plugin.path }")
      table.clear(PLUGINS, plugin)
    }
  }
}
