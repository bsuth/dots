local packer = require('packer')

packer.use('neovim/nvim-lspconfig')
packer.use('hrsh7th/nvim-cmp')
packer.use('hrsh7th/cmp-nvim-lsp') -- lsp
packer.use('hrsh7th/vim-vsnip') -- lsp snippets
packer.use('hrsh7th/cmp-vsnip') -- lsp snippets
packer.use('hrsh7th/cmp-buffer') -- words in current buffer
packer.use('hrsh7th/cmp-path') -- file paths
packer.use('hrsh7th/cmp-nvim-lua') -- neovim lua api
packer.use('hrsh7th/cmp-nvim-lsp-signature-help') -- fancy function signature highlighting

local cmp = require('cmp')
local lspconfig = require('lspconfig')
local cmp_nvim_lsp = require('cmp_nvim_lsp')

vim.keymap.set('n', '<leader>lsp', ':silent :LspRestart<cr>')
vim.keymap.set('n', "'e", vim.diagnostic.open_float)
vim.keymap.set('n', "'h", vim.lsp.buf.hover)
vim.keymap.set('n', "'d", vim.lsp.buf.definition)
vim.keymap.set('n', "'D", vim.lsp.buf.declaration)
vim.keymap.set('n', "'p", vim.diagnostic.goto_prev)
vim.keymap.set('n', "'n", vim.diagnostic.goto_next)
vim.keymap.set('n', "'r", vim.lsp.buf.references)
vim.keymap.set('n', "'q", vim.diagnostic.setloclist)
vim.keymap.set('n', "'s", vim.lsp.buf.rename)
vim.keymap.set('n', "'c", vim.lsp.buf.code_action)

cmp.setup({
  mapping = {
    ['<c-Space>'] = cmp.mapping.complete(),
    ['<c-p>'] = cmp.mapping.select_prev_item(),
    ['<c-n>'] = cmp.mapping.select_next_item(),
    ['<cr>'] = cmp.mapping.confirm(),
    ['<c-d>'] = cmp.mapping.scroll_docs(-4),
    ['<c-u>'] = cmp.mapping.scroll_docs(4),
    ['<c-c>'] = cmp.mapping.close(),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'nvim_lua' },
    { name = 'nvim_lsp_signature_help' },
    { name = 'buffer' },
    { name = 'path' },
  },
  snippet = {
    expand = args -> vim.fn['vsnip#anonymous'](args.body),
  },
})

local LSP_SERVERS = {
  clangd = {},
  cssls = {},
  graphql = {},
  gopls = {},
  eslint = {},
  tsserver = {},
  tsserver = {},
  gdscript = {},
  jsonls = {
    filetypes = { 'json', 'jsonc' },
    settings = {
      json = {
        -- https://www.schemastore.org
        schemas = {
          {
            fileMatch = { 'package.json' },
            url = 'https://json.schemastore.org/package.json',
          },
          {
            fileMatch = { 'tsconfig*.json' },
            url = 'https://json.schemastore.org/tsconfig.json',
          },
        },
      },
    },
  },
}

for server, config in pairs(LSP_SERVERS) {
  lspconfig[server].setup(vim.tbl_deep_extend('force', {
    capabilities = cmp_nvim_lsp.default_capabilities(
      vim.lsp.protocol.make_client_capabilities()
    ),
  }, config))
}
