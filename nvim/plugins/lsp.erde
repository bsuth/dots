local packer = require('packer')

packer.use('neovim/nvim-lspconfig')

local lspconfig = require('lspconfig')
local cmp_nvim_lsp = require('cmp_nvim_lsp')

vim.keymap.set('n', '<leader>lsp', ':silent :LspRestart<cr>')
vim.keymap.set('n', "''", vim.lsp.buf.hover)
vim.keymap.set('n', "'o", vim.diagnostic.open_float) -- o(pen)
vim.keymap.set('n', "'r", vim.lsp.buf.rename) -- r(ename)
vim.keymap.set('n', "'d", vim.lsp.buf.definition) -- d(efinition)
vim.keymap.set('n', "'p", vim.diagnostic.goto_prev) -- p(rev)
vim.keymap.set('n', "'n", vim.diagnostic.goto_next) -- n(ext)
vim.keymap.set('n', "'l", vim.diagnostic.setloclist) -- l(ist)
vim.keymap.set('n', "'u", vim.lsp.buf.references) -- u(sage)
vim.keymap.set('n', "'a", vim.lsp.buf.code_action) -- a(ction)

local LSP_SERVERS = {
  cssls = {},
  eslint = {},
  graphql = {},
  gopls = {},
  tsserver = {},
  clangd = {},
  jsonls = { filetypes = { 'json', 'jsonc' } },
  stylelint_lsp = {
    settings = {
      stylelintplus = {
        autoFixOnFormat = true,
      }
    },
  },
}

for server, config in pairs(LSP_SERVERS) {
  lspconfig[server].setup(vim.tbl_deep_extend('force', {
    capabilities = cmp_nvim_lsp.default_capabilities(
      vim.lsp.protocol.make_client_capabilities()
    ),
  }, config))
}
